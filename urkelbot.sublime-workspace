{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cry",
				"crypto_output\tstatement"
			],
			[
				"eth",
				"ethOutput\tstatement"
			],
			[
				"bch",
				"bchOutput\tstatement"
			],
			[
				"re",
				"register_user_command"
			],
			[
				"data",
				"dataNumber\tstatement"
			],
			[
				"play",
				"playerNumber\tstatement"
			],
			[
				"styl",
				"stylesheet"
			],
			[
				"b",
				"browserSync"
			],
			[
				"animation",
				"animation-delay"
			],
			[
				"text",
				"text-align"
			],
			[
				"min-w",
				"min-width"
			],
			[
				"backgrou",
				"background-position"
			],
			[
				"backgroun",
				"background-size"
			],
			[
				"list",
				"list-style"
			],
			[
				"list-",
				"list-style"
			],
			[
				"Sans",
				"sans-serif"
			],
			[
				"font-",
				"font-family"
			],
			[
				"font-s",
				"font-size"
			],
			[
				"wid",
				"width"
			],
			[
				"logo",
				"logo-orange"
			],
			[
				"font",
				"font-style"
			],
			[
				"loo",
				"logo-green"
			],
			[
				"dark",
				"darkblue"
			],
			[
				"bloc",
				"inline-block"
			],
			[
				"min",
				"min-width"
			],
			[
				"l",
				"line-height"
			],
			[
				"dar",
				"darkgrey"
			],
			[
				"max-",
				"max-width"
			],
			[
				"bor",
				"border-bottom"
			],
			[
				"logo-",
				"logo-green"
			],
			[
				"text-",
				"text-decoration"
			],
			[
				"pro",
				"proxima-nova-alt"
			],
			[
				"lightgre",
				"lightgreen"
			],
			[
				"in",
				"inline-block"
			],
			[
				"ff",
				"ff-meta-web-pro"
			],
			[
				"light",
				"lightgrey"
			],
			[
				"lo",
				"location"
			],
			[
				"li",
				"lightgrey"
			],
			[
				"max",
				"max-width"
			],
			[
				"lig",
				"lightgrey"
			],
			[
				"ligh",
				"lightgreen"
			],
			[
				"lighr",
				"lightgreen"
			],
			[
				"fon",
				"font-weight"
			],
			[
				"te",
				"text-align"
			],
			[
				"fotn",
				"font-family"
			],
			[
				"darke",
				"darkerblue"
			],
			[
				"bas",
				"ff-basic-gothic-web-pro"
			],
			[
				"br",
				"brandon-grotesque"
			],
			[
				"meta",
				"ff-meta-web-pro"
			],
			[
				"tex",
				"text-decoration"
			],
			[
				"magi",
				"margin-right"
			],
			[
				"w",
				"width"
			],
			[
				"fut",
				"futura-pt"
			],
			[
				"futu",
				"futura-pt"
			],
			[
				"futura",
				"futura-pt-condensed"
			],
			[
				"nopad",
				"nopad"
			],
			[
				"fu",
				"futura-pt"
			],
			[
				"im",
				"important"
			],
			[
				"list-style",
				"list-style-type"
			],
			[
				"align",
				"text-align"
			],
			[
				"md",
				"mdgrey"
			],
			[
				"f",
				"futura-pt"
			],
			[
				"i",
				"italic"
			],
			[
				"icon_",
				"icon_bottle"
			],
			[
				"nor",
				"no-repeat"
			],
			[
				"inline",
				"inline-block"
			],
			[
				"list-st",
				"list-style-type"
			],
			[
				"med",
				"medgrey"
			],
			[
				"inlin",
				"inline-block"
			],
			[
				"u",
				"ul\tTag"
			]
		]
	},
	"buffers":
	[
		{
			"file": "rising.py",
			"settings":
			{
				"buffer_size": 2570,
				"line_ending": "Windows"
			}
		},
		{
			"file": "crypto.py",
			"settings":
			{
				"buffer_size": 2767,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": " \"\"\"\nurkelbot v1.5\n           _________._____ /\\__.____.\n           \\    ___/     //   /_   / \\_\n         __ \\\\__   /   _/ \\____/__,   /\n   _____/__________\\___\\____ / /_    /\n   \\     _/__._______\\   ___/_.__\\  /_._______._______._______.________\n   /    _    \\  __   //       \\___\\/   \\_   _  \\_   _  \\_  __  \\_   _  \\_\n  /    _/    /  \\   _/    /  _/   _/    /   /   /   /   /  \\    /   /   /\n  \\____\\____/\\\\_____\\____/___\\  ______//___/___/___/___/\\\\_____/___/___/\n                              \\/\n\"\"\"\nfrom __future__ import print_function\nfrom datetime import datetime\nfrom bs4 import BeautifulSoup\nimport plugins\nimport random\nimport re\nimport subprocess\nimport urllib.parse\nimport urllib.request\nimport json\nimport os\nimport pytz\nfile_path = \"/home/sky/hangoutsbot/hangupsbot/plugins/\"\n\ndef _initialize(bot):\n    plugins.register_user_command([\"uptime\"])\n    plugins.register_user_command([\"rising\"])\n    plugins.register_user_command([\"standings\"])\n    plugins.register_user_command([\"dogfacts\"])\n    plugins.register_user_command([\"catfacts\"])\n    plugins.register_user_command([\"hackers\"])\n    plugins.register_user_command([\"majorleague\"])\n    plugins.register_user_command([\"quote\"])\n    plugins.register_user_command([\"crypto\"])\n    plugins.register_user_command([\"symbol\"])\n    plugins.register_user_command([\"table\"])\n    plugins.register_user_command([\"scores\"])\n    plugins.register_user_command([\"fortune\"])\n    plugins.register_user_command([\"binance\"])\n\n\ndef uptime(bot, event):\n    proc1 = subprocess.check_output(['uptime']).decode('utf-8').strip(\"\\n\")\n    time = re.search(r'up (.* days)?', proc1)\n    proc2 = subprocess.check_output(['uptime', '-p']).decode('utf-8').strip(\"\\n\")\n    time_pretty = re.search(r'up (.*)?', proc2)\n    if time.group(1) is not None:\n        time_strings = [time_pretty.group(1), \"(\" + time.group(1) + \")\"]\n        time_stuff = \" \".join(time_strings)\n    else:\n        time_strings = [time_pretty.group(1)]\n        time_stuff = \" \".join(time_strings)\n    yield from bot.coro_send_message(event.conv_id, time_stuff)\n\n\ndef dogfacts (bot, event):\n    lines = open(file_path + \"dogfacts.txt\",\"r\").read().splitlines()\n    dogFact=random.choice(lines)\n    print(dogFact)\n    dogFactAll = \"<b>DOG FACTS!!!</b>\\n\\n\" + dogFact\n    \n    yield from bot.coro_send_message(event.conv_id, dogFactAll)\n\n\ndef catfacts(bot, event):\n    catFact = \"<b>CAT FACTS!!!</b>\\n\\n\" + \"Cats are stupid\"\n    yield from bot.coro_send_message(event.conv_id, catFact)\n\n\ndef hackers (bot, event):\n    lines = open(file_path + \"hackers.txt\",\"r\").read().splitlines()\n    hackersQuote=random.choice(lines)\n    print(hackersQuote)\n    \n    yield from bot.coro_send_message(event.conv_id, hackersQuote)\n\n\ndef majorleague(bot, event):\n    lines = open(file_path + \"majorleague.txt\", \"r\").read().splitlines()\n    mlQuote = random.choice(lines)\n    print(mlQuote)\n\n    yield from bot.coro_send_message(event.conv_id, mlQuote)\n\n\ndef quote(bot,event):\n    hackers_quotes = open(file_path + 'hackers.txt', 'r').read().splitlines()\n    ml_quotes = open(file_path + 'majorleague.txt', 'r').read().splitlines()\n    d = {}\n    d[\"Hackers\"] = hackers_quotes\n    d[\"Major League\"] = ml_quotes\n    which_list = random.choice(list(d))\n    quote = random.choice(d[which_list])\n    quote_output = \"<b>\" + which_list + \" Quote!!!</b>\\n\\n\" + quote\n    print(quote_output)\n    yield from bot.coro_send_message(event.conv_id, quote_output)\n\n\ndef rising(bot, event):\n    url = 'http://www.fplstatistics.co.uk/Home/IndexWG'\n    header = {'User-Agent': 'Mozilla/5.0'}\n\n    r = urllib.request.Request(url=url, headers=header)\n    page = urllib.request.urlopen(r)\n    soup = BeautifulSoup(page.read(), \"lxml\")\n    string = 'tbody tr:nth-of-type(1) td:nth-of-type(1), tbody tr:nth-of-type(1) td:nth-of-type(2), \\\n    tbody tr:nth-of-type(1) td:nth-of-type(6), tbody tr:nth-of-type(2) td:nth-of-type(1), tbody tr:nth-of-type(2) \\\n    td:nth-of-type(2), tbody tr:nth-of-type(2) td:nth-of-type(6), tbody tr:nth-of-type(3) td:nth-of-type(1), \\\n    tbody tr:nth-of-type(3) td:nth-of-type(2), tbody tr:nth-of-type(3) td:nth-of-type(6), tbody tr:nth-of-type(4) \\\n    td:nth-of-type(1), tbody tr:nth-of-type(4) td:nth-of-type(2), tbody tr:nth-of-type(4) td:nth-of-type(6)'\n    data = soup.select(string)\n    player1Name = data[0].text.strip()\n    player1Team = data[1].text.strip()\n    player1Price = data[2].text.strip()\n    player2Name = data[3].text.strip()\n    player2Team = data[4].text.strip()\n    player2Price = data[5].text.strip()\n    player3Name = data[6].text.strip()\n    player3Team = data[7].text.strip()\n    player3Price = data[8].text.strip()\n\n    lineup = {\n        1: {\"playerName\": player1Name,\n            \"playerTeam\": player1Team,\n            \"playerPrice\": player1Price},\n        2: {\"playerName\": player2Name,\n            \"playerTeam\": player2Team,\n            \"playerPrice\": player2Price},\n        3: {\"playerName\": player3Name,\n            \"playerTeam\": player3Team,\n            \"playerPrice\": player3Price},\n    }\n\n    player1 = '<b>' + lineup[1][\"playerName\"] + '</b> ' + lineup[1][\"playerTeam\"] + ' <i>' + lineup[1][\n        \"playerPrice\"] + '</i><br />'\n    player2 = '<b>' + lineup[2][\"playerName\"] + '</b> ' + lineup[2][\"playerTeam\"] + ' <i>' + lineup[2][\n        \"playerPrice\"] + '</i><br />'\n    player3 = '<b>' + lineup[3][\"playerName\"] + '</b> ' + lineup[3][\"playerTeam\"] + ' <i>' + lineup[3][\n        \"playerPrice\"] + '</i>'\n\n    risingOutput = '<b>FPL Soon To Rise</b><br /><br />' + ''.join(player1) + ''.join(player2) + ''.join(player3)\n    yield from bot.coro_send_message(event.conv_id, risingOutput)\n\n\ndef standings(bot, event):\n    url = 'https://fplmystats.com/league/116940/'\n    page = urllib.request.urlopen(url)\n    soup = BeautifulSoup(page.read(), \"html.parser\")\n\n    string = 'tbody tr:nth-of-type(1) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(2) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(3) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(4) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(5) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(6) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(7) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(8) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(9) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(10) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(11) td:nth-of-type(2), \\\n            tbody tr:nth-of-type(12) td:nth-of-type(2)'\n\n    data = soup.select(string)\n    print(data)\n\n    team1Owner = data[0].text.strip()\n    team2Owner = data[1].text.strip()\n    team3Owner = data[2].text.strip()\n    team4Owner = data[3].text.strip()\n    team5Owner = data[4].text.strip()\n    team6Owner = data[5].text.strip()\n    team7Owner = data[6].text.strip()\n    team8Owner = data[7].text.strip()\n    team9Owner = data[8].text.strip()\n    team10Owner = data[9].text.strip()\n    team11Owner = data[10].text.strip()\n    team12Owner = data[11].text.strip()\n\n    top = {\n        1: {\"teamName\": team1Owner},\n        2: {\"teamName\": team2Owner},\n        3: {\"teamName\": team3Owner},\n        4: {\"teamName\": team4Owner},\n        5: {\"teamName\": team5Owner},\n        6: {\"teamName\": team6Owner},\n        7: {\"teamName\": team7Owner},\n        8: {\"teamName\": team8Owner},\n        9: {\"teamName\": team9Owner},\n        10: {\"teamName\": team10Owner},\n        11: {\"teamName\": team11Owner},\n        12: {\"teamName\": team12Owner}\n    }\n\n    loc = 1\n    while loc <= 12:\n        globals()['team%s' % loc] = str(loc) + '. <b>' + top[loc][\"teamName\"] + '</b>'\n        loc += 1\n\n    topOutput = '<b>FPL Standings</b><br /><br />' + ''.join(team1) + '<br/>' + ''.join(team2) + '<br/>' + ''.join(\n        team3) + '<br/>' + ''.join(team4) + '<br/>' + ''.join(team5) + '<br/>' + ''.join(team6) + '<br/>' + ''.join(\n        team7) + '<br/>' + ''.join(team8) + '<br/>' + ''.join(team9) + '<br/>' + ''.join(team10) + '<br/>' + ''.join(\n        team11) + '<br/>' + ''.join(team12)\n    print(topOutput)\n    yield from bot.coro_send_message(event.conv_id, topOutput)\n\n\ndef crypto(bot, event):\n    urlData = \"https://api.coinmarketcap.com/v1/ticker/?convert=USD&limit=0\"\n    webURL = urllib.request.urlopen(urlData)\n    data = webURL.read()\n    encoding = webURL.info().get_content_charset('utf-8')\n    crypto_list = json.loads(data.decode(encoding))\n\n    for coin in crypto_list:\n        if coin[\"id\"] == \"bitcoin\":\n            btc_price = float(coin[\"price_usd\"])\n            btc_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"bitcoin-cash\":\n            bch_price = float(coin[\"price_usd\"])\n            bch_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"ethereum\":\n            eth_price = float(coin[\"price_usd\"])\n            eth_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"icon\":\n            icx_price = float(coin[\"price_usd\"])\n            icx_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"litecoin\":\n            ltc_price = float(coin[\"price_usd\"])\n            ltc_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"stellar\":\n            xlm_price = float(coin[\"price_usd\"])\n            xlm_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"raiblocks\":\n            xrb_price = float(coin[\"price_usd\"])\n            xrb_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"request-network\":\n            req_price = float(coin[\"price_usd\"])\n            req_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"ripple\":\n            xrp_price = float(coin[\"price_usd\"])\n            xrp_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"vechain\":\n            ven_price = float(coin[\"price_usd\"])\n            ven_change = float(coin[\"percent_change_24h\"])\n        elif coin[\"id\"] == \"binance-coin\":\n            bnb_price = float(coin[\"price_usd\"])\n            bnb_change = float(coin[\"percent_change_24h\"])\n\n    crypto_output = \"<b>BTC</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>BCH</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>ETH</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>LTC</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>BNB</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>ICX</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>REQ</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>VEN</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>XLM</b>: ${:,.3f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>XRB</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\\n\" \\\n                    \"<b>XRP</b>: ${:,.2f}  (<i>{:+.2f}%</i>)\" \\\n        .format(btc_price, btc_change, bch_price, bch_change, eth_price, eth_change, ltc_price, ltc_change, bnb_price, bnb_change, icx_price, icx_change, req_price, req_change, ven_price, ven_change, xlm_price, xlm_change, xrb_price, xrb_change, xrp_price, xrp_change)\n\n    yield from bot.coro_send_message(event.conv_id, crypto_output)\n\n\ndef symbol(bot, event, sym):\n\n    urlData = \"https://api.coinmarketcap.com/v1/ticker/?convert=USD&limit=0\"\n    webURL = urllib.request.urlopen(urlData)\n    data = webURL.read()\n    encoding = webURL.info().get_content_charset('utf-8')\n    crypto_list = json.loads(data.decode(encoding))\n\n    sym = sym.upper()\n\n    for coin in crypto_list:\n\n        if coin[\"symbol\"] == sym:\n            coin_name = coin[\"name\"]\n            usd_price = float(coin[\"price_usd\"])\n            btc_price = float(coin[\"price_btc\"])\n            change_24h = float(coin[\"percent_change_24h\"])\n            change_1h = float(coin[\"percent_change_1h\"])\n\n            symbol_output = \"<b>\" + coin_name + \" (\" + sym + \")</b>\\n\\n<b>USD</b>: ${:,.3f}\\n\" \\\n                                                             \"<b>BTC</b>: {:.7f}\\n\" \\\n                                                             \"<b>24H Change</b>: {:+.2f}%\\n\" \\\n                                                             \"<b>1H Change</b>: {:+.2f}%\" \\\n                .format(usd_price, btc_price, change_24h, change_1h)\n            break\n        else:\n            symbol_output = \"There was no match for <b>\\\"{}\\\"</b>\".format(sym)\n\n    yield from bot.coro_send_message(event.conv_id, symbol_output)\n\n\ndef table(bot, event):\n\n    with open(file_path + \"premkey.txt\", \"r\") as apikey:\n        key = apikey.read()\n\n    urlData = \"http://api.football-api.com/2.0/standings/1204?Authorization=\" + key\n\n    webURL = urllib.request.urlopen(urlData)\n    data = webURL.read()\n    encoding = webURL.info().get_content_charset('utf-8')\n    prem_table = json.loads(data.decode(encoding))\n\n    table_dict = {}\n    game_week = prem_table[0][\"round\"]\n\n    for team in prem_table:\n        team_posi = int(team[\"position\"])\n\n        table_dict[team_posi] = {\n            \"name\": team[\"team_name\"],\n            \"points\": team[\"points\"],\n            \"form\": team[\"recent_form\"],\n            \"gd\": team[\"gd\"],\n            \"gs\": team[\"overall_gs\"],\n            \"ga\": team[\"overall_ga\"],\n            \"position\": team[\"position\"]\n        }\n\n    print_string = \"\"\n    for i in range(len(table_dict)):\n        print_string = print_string + \"<b>\" + str(i + 1) + \"</b> - \" + table_dict[i + 1][\"name\"] + \" (\" + \\\n                       table_dict[i + 1][\"points\"] + \")\\n\"\n\n    print_string = \"<b>Premier League GW{}</b>\\n\\n\".format(game_week) + print_string[:-1]\n\n    yield from bot.coro_send_message(event.conv_id, print_string)\n\n\ndef scores(bot, event):\n\n    with open(file_path + \"premkey.txt\", \"r\") as apikey:\n        key = apikey.read()\n\n    # Convert time to normal time instead of military time, change time zone to Central\n    def time_convert(time):\n\n        mil_time = time\n        hours, minutes = mil_time.split(\":\")\n        hours, minutes = int(hours) - 6, int(minutes)\n        am_pm = \"AM\"\n\n        if hours > 12:\n            am_pm = \"PM\"\n            hours -= 12\n        return \"{}:{:02d}\".format(hours, minutes) + am_pm\n\n    # Check events for goals, then return goals\n    def get_events(l):\n        events = \"\"\n        event_list = []\n        for i in range(len(l)):\n            if l[i][\"type\"] == \"goal\":\n                player = l[i][\"player\"]\n                minute = l[i][\"minute\"]\n                single_event = player + \" \" + minute + \"'\"\n                event_list.append(single_event)\n                events = \", \".join(event_list)\n                i += 1\n        return events\n\n    tz = pytz.timezone('America/Chicago')\n    current_date = datetime.now(tz=tz).strftime(\"%d.%m.%Y\")\n\n    urlData = \"http://api.football-api.com/2.0/matches?comp_id=1204&match_date=\" + current_date + \"&Authorization=\" + key\n\n    webURL = urllib.request.urlopen(urlData)\n    data = webURL.read()\n    encoding = webURL.info().get_content_charset('utf-8')\n    matches = json.loads(data.decode(encoding))\n\n    matches_dict = {}\n    matches_date = matches[0][\"formatted_date\"]\n    matches_date = datetime.strptime(matches_date, '%d.%m.%Y').strftime('%m/%d/%Y')\n\n    def get_events(l):\n        events = \"\"\n        event_list = []\n        for i in range(len(l)):\n            if l[i][\"type\"] == \"goal\":\n                player = l[i][\"player\"]\n                minute = l[i][\"minute\"]\n                single_event = player + \" \" + minute + \"'\"\n                event_list.append(single_event)\n                events = \", \".join(event_list)\n                i += 1\n        return events\n\n    count = 1\n    for match in matches:\n        match_id = count\n        matches_dict[match_id] = {\n            \"home\": match[\"localteam_name\"],\n            \"visitor\": match[\"visitorteam_name\"],\n            \"home_score\": match[\"localteam_score\"],\n            \"visitor_score\": match[\"visitorteam_score\"],\n            \"status\": match[\"status\"],\n            \"events\": match[\"events\"]\n        }\n\n        try:\n            matches_dict[match_id][\"status\"] = str(int(matches_dict[match_id][\"status\"])) + \"'\"\n        except ValueError:\n            matches_dict[match_id][\"status\"] = matches_dict[match_id][\"status\"]\n\n        if len(matches_dict[match_id][\"status\"]) == 5:\n            matches_dict[match_id][\"status\"] = time_convert(matches_dict[match_id][\"status\"])\n\n        count += 1\n\n    print_string = \"\"\n    for i in range(len(matches_dict)):\n        print_string = print_string + matches_dict[i + 1][\"home\"] + \" <b>\" + matches_dict[i + 1][\"home_score\"] + \" - \" + \\\n                       matches_dict[i + 1][\"visitor_score\"] + \"</b> \" + matches_dict[i + 1][\"visitor\"] + \" \" + \\\n                       matches_dict[i + 1][\"status\"] + \"\\n\"\n        if len(get_events(matches_dict[i + 1][\"events\"])) > 0:\n            print_string = print_string + \"<i>(\" + get_events(matches_dict[i + 1][\"events\"]) + \")</i>\\n\\n\"\n        else:\n            print_string = print_string + \"\\n\"\n\n    print_string = \"<b>Match scores for \" + matches_date + \"</b>\\n\\n\" + print_string[:-1]\n    print(print_string)\n\n    yield from bot.coro_send_message(event.conv_id, print_string)\n\n\ndef fortune(bot, event):\n    fortune = subprocess.getoutput(\"/usr/games/fortune fortunes\")\n    print(fortune)\n    yield from bot.coro_send_message(event.conv_id, fortune)\n\n",
			"file": "urkel.py",
			"file_size": 17629,
			"file_write_time": 131603688921793913,
			"settings":
			{
				"buffer_size": 17193,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 137.0,
		"last_filter": "install ",
		"selected_items":
		[
			[
				"install ",
				"Package Control: Install Package"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 131.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/sky_2/Google Drive/turtle.txt",
		"/C/Users/sky_2/AppData/Local/Temp/scp01133/uploads/sheek wants.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa273308.14840/SuperMarioUnlimitedManual.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa280268.1206/readme.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa280268.29198/readme.txt",
		"/C/Users/sky_2/AppData/Roaming/NXT/conf/nxt.properties",
		"/E/backup/AppData/Roaming/Litecoin/litecoin.conf",
		"/E/btc/bitcoin.conf",
		"/C/Users/sky_2/AppData/Roaming/Electrum/wallets/default_wallet",
		"/C/Users/sky_2/Google Drive/Electroneum/info.txt",
		"/C/Users/sky_2/Google Drive/Sia/sia.txt",
		"/C/Users/sky_2/Google Drive/wallet.dat",
		"/E/bitcoin/readme.txt",
		"/E/backup/AppData/Roaming/Bitcoin/blkindex.dat",
		"/E/backup/AppData/Roaming/Bitcoin/wallet.dat",
		"/E/backup/AppData/Roaming/Bitcoin/peers.dat",
		"/C/Users/sky_2/Google Drive/keypair.gpg",
		"/C/Users/sky_2/Google Drive/BTC/xlm.txt",
		"/C/Users/sky_2/Google Drive/BTC/ltc.txt",
		"/C/Users/sky_2/Google Drive/BTC/metamak.txt",
		"/C/Users/sky_2/Google Drive/BTC/btc.txt",
		"/D/projects/urkelbot/data.txt",
		"/C/Users/sky_2/Google Drive/Repro Stuff/SNES/SNES Roms/Marvelous/MarvelousATI_EN_Readme.txt",
		"/C/Users/sky_2/Downloads/_ReadMe_.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa109136.15446/Anamanaguchi.06Nov2012.Drunken.Unicorn.Atl.Ga.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa76616.12108/MarvelousATI_EN_Readme.txt",
		"/C/Users/sky_2/Google Drive/btc.txt",
		"/C/claymore/Claymore CryptoNote CPU Miner v3.5 Beta - POOL/pools.txt",
		"/C/btcrecover-master/tokens.txt",
		"/C/Users/sky_2/Google Drive/wallet_10_04_2013_23_20_07.aes.json",
		"/C/Users/sky_2/Google Drive/Repro Stuff/PS1/view-source_modchip.aeug.org_modchipfaq.txt",
		"/C/Users/sky_2/Google Drive/Repro Stuff/SNES/SNES Roms/Tengai Makyou Zero/TM Zero (Eng) Readme.txt",
		"/D/music/Sachiko Kanenobu - Misora (1972)/info.txt",
		"/C/Users/sky_2/AppData/Local/Temp/scp11207/uploads/want.txt",
		"/C/Users/sky_2/AppData/Local/Temp/scp11890/uploads/requests.txt",
		"/C/Users/sky_2/Downloads/lecture-84-challenge.txt",
		"/C/Users/sky_2/Downloads/lecture-77-challenge.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa22388.5379/jOINTRO.tXT",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa4988.30525/example.py",
		"/C/Users/sky_2/Downloads/lecture-70-challenge.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa4988.29532/cave_initialise.py",
		"/C/Users/sky_2/Downloads/lecture-64-challenge.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa70612.20538/sample.txt",
		"/C/Users/sky_2/Downloads/lecture-60-challenge.txt",
		"/C/Users/sky_2/Downloads/lecture-56-challenge (2).txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa35760.32310/sample.txt",
		"/C/Users/sky_2/Downloads/lecture-58-challenge (1).txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa63740.31172/challenge.py",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa65552.29995/challenge.py",
		"/C/Users/sky_2/Downloads/lecture-56-challenge (1).txt",
		"/C/Users/sky_2/Downloads/lecture-56-challenge.txt",
		"/C/Users/sky_2/Downloads/lecture-58-challenge.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa36588.17099/challenge.py",
		"/C/Users/sky_2/Downloads/lecture-38-challenge.txt",
		"/K/06 Program Flow Control in Python/attached_files/035 Challenge - Program Flow - Part 1/Lecture 35 - Challenge - Program Flow - Part 1 - Source code/ProgramFlowChallenge/challenge.py",
		"/D/projects/python/.gitignore",
		"/D/projects/urkelbot/.gitignore",
		"/K/06 Program Flow Control in Python/attached_files/030 Challenge - If Then Else/lecture-30-challenge.txt",
		"/E/juarez/Apps/JetBrains.IntelliJ.IDEA.Ultimate.2017.1.5.Incl.KeyMaker-DVT/d251cje3/d-000je/I_LOVE_DVT/readme.txt",
		"/C/Users/sky_2/Google Drive/Repro Stuff/PS2/Modbo 4.0 Diagrams/readme.txt",
		"/K/system/config.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa15924.11772/config.txt",
		"/K/config.txt",
		"/E/juarez/Apps/AFFINITY.DESIGNER.V1.5.3-XFORCE/xad15301/xfdes153/Crack/install.txt",
		"/E/juarez/Apps/Autodesk.EAGLE.v8.3.1.X64-AMPED/ampqei21/amped/AMPED/amped.txt",
		"/C/Users/sky_2/AppData/Local/Temp/scp35735/uploads/organization error reporting.txt",
		"/C/Users/sky_2/AppData/Local/Temp/scp35252/uploads/want.txt",
		"/C/Users/sky_2/AppData/Local/Temp/scp35306/uploads/requests.txt",
		"/E/juarez/Apps/WinRAR 5.50 incl Patch 32bit + 64bit/Patch_WinRar_5.50/ReadMe.txt",
		"/E/juarez/Apps/Directory Opus Pro v12.2 Build 6138 Multilingual/Fix with instructions/Read first!.txt",
		"/C/Users/sky_2/AppData/Local/Temp/scp35503/uploads/requests.txt",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa0.622/readme.txt",
		"/D/projects/urkelbot/hackers.txt",
		"/E/juarez/Apps/L0pht.Holdings.L0phtCrack.Enterprise.v7.0.15.X64.Incl.Keygen-AMPED/ampaoc01/amped/AMPED/amped.txt",
		"/C/Users/sky_2/OpenVPN/config/ca.crt",
		"/C/Users/sky_2/OpenVPN/config/ephraim.ovpn",
		"/C/Users/sky_2/OpenVPN/config/crash.ovpn",
		"/C/Users/sky_2/AppData/Local/Temp/Rar$DIa0.983/MCSCI-5.TXT",
		"/C/Users/sky_2/Desktop/phantom.motd.tcl",
		"/C/Users/sky_2/AppData/Local/Temp/scp31959/uploads/want.txt",
		"/C/Users/sky_2/AppData/Local/Temp/scp35617/uploads/want.txt",
		"/G/mame/roms/_ReadMe_.txt",
		"/G/games/Other/Scene/_DOX/32bit_Rocks_Major_Ass_DOX_CONSOLE-ALLIANCE/001.TXT",
		"/G/games/Other/Scene/_DOX/MCI_Bust_Announcement_DOX_CONSOLE-iND/MCIBUST!.TXT",
		"/G/games/Other/Scene/_DOX/LSD_Lives_On_DOX_CONSOLE-LSD/LSD-LIVE.TXT",
		"/G/games/Other/Scene/_DOX/FUCK_Changes_Name_To_BGD_DOX_CONSOLE-BGD/FUCK2BGD.TXT",
		"/D/projects/python/hello.py",
		"/D/wrasslin/PWG BOLA 2016/BOLA2016.jpg",
		"/D/projects/urkelbot/urkel.py",
		"/C/Users/Sky/AppData/Local/Temp/scp24205/uploads/want.txt",
		"/C/Program Files/OpenVPN/config/client.ovpn",
		"/C/Users/Sky/AppData/Local/Temp/scp00687/home/sky/ca.crt",
		"/C/Users/Sky/AppData/Local/Temp/scp00942/uploads/want.txt",
		"/C/Users/Sky/AppData/Local/Temp/scp44535/uploads/want.txt",
		"/H/games/ps2/DreamMixTVWorldFighters.7z",
		"/H/games/amiga/_DOX/10000_Ohm_ASCII_Collection_DOX_AMIGA-ARTCORE/AC!-OHM.TXT",
		"/C/Users/Sky/AppData/Local/Temp/scp00627/uploads/want.txt",
		"/H/games/amiga/_DOX/Virus_Warning_AMIGA-SKIDROW/SR-VIR1.TXT",
		"/C/Users/Sky/AppData/Local/Temp/scp30956/uploads/want.txt",
		"/C/Users/Sky/AppData/Local/Temp/Rar$DIa0.512/AGG_0193.TXT",
		"/C/Users/Sky/AppData/Local/Temp/scp32932/uploads/want.txt",
		"/C/Users/Sky/AppData/Local/Temp/scp48813/games/kuribo's scene archive/gb/_TRAINERS/True_Lies_Plus1_Trainer_GB-ASGARD/ASG-REL.NFO",
		"/C/Users/Sky/AppData/Local/Temp/scp14676/uploads/want.txt",
		"/C/Users/Sky/AppData/Local/Temp/Rar$DIa0.466/Lastminute.txt",
		"/C/Users/Sky/AppData/Local/Temp/Rar$DIa0.335/ecoder.txt",
		"/C/Users/Sky/AppData/Local/Temp/Rar$DIa0.142/os-genhi.txt",
		"/H/games/genesis/_DOX/Chiki_Chiki_Boys_Manual_DOX_SMD-DEXTROSE/chikiusa.txt",
		"/D/projects/datahelicopter/res/ascii_logo.txt",
		"/E/juarez/Apps/FlashFXP v4.1.3 Build 1658 Final Multilingual/key.txt",
		"/C/Users/Sky/AppData/Local/Temp/Rar$DIa0.838/sk-upuap.txt",
		"/G/roms/gbc/Corrupt_Console_Issue_3-CC/corr!003.txt",
		"/G/roms/gbc/Corrupt_Console_Issue_2-CC/corr!002.txt",
		"/G/roms/gbc/Corrupt_Console_Issue_4-CC/corr!004.txt",
		"/C/Users/Sky/AppData/Local/Temp/Rar$DIa0.195/readme.txt",
		"/G/dreamcast/Dreamcast Self-Booting_Toolkit-ECHELON/TUTORIAL.TXT",
		"/G/dreamcast/PBA_Bowling_2001_USA_DC-BELOKK/PBA Bowling 2001-Belokk.txt",
		"/D/projects/datahelicopter/dh-wp/index.php",
		"/D/projects/datahelicopter/intro/scss/style.scss",
		"/D/projects/datahelicopter/intro/CODEF-master/tutorials/81_music.html",
		"/D/projects/datahelicopter/intro/footer.txt",
		"/D/projects/datahelicopter/intro/index.php",
		"/D/projects/datahelicopter/intro/header.txt",
		"/E/roms/GBC/misc/cw-gba06.txt",
		"/E/roms/GBC/misc/cw-gba01.txt",
		"/E/roms/GBC/misc/cw-gba05.txt",
		"/E/roms/GBC/misc/cw-gba03.txt",
		"/E/roms/GBC/misc/f.txt",
		"/E/roms/GBC/roms/batch.bat"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"lite",
			"address",
			"ping",
			"idea",
			"Nikon",
			"phantom",
			"mur",
			"rust",
			"numplayers",
			"rust",
			"get_status",
			"get_st",
			"rust-ser",
			"./",
			"./elements",
			"./core",
			"h2",
			"hr {",
			"contact-form",
			"col-xs-1",
			"darken($mint",
			"h1",
			"tags",
			"darkblue",
			"tag",
			"4rem",
			"header",
			"25",
			"evolve",
			"pokestop",
			"softban",
			"trans",
			"radius",
			"dup",
			"pokeball",
			"incub",
			"hr {",
			"        <!--",
			"$red",
			"more",
			"more-link",
			"chimney-pro",
			"chimney_pro",
			"nopad",
			":before",
			"Red Bank",
			"nashville",
			"Memphis",
			"East Ridge",
			"East Brainerd",
			"Collegedale",
			"Cleveland",
			"Chattanooga",
			"Tyrone",
			"GA",
			"Smyrna",
			"Sandy Springs",
			"Roswell",
			"Rome",
			"Peachtree City",
			"Marietta",
			"Kennesaw",
			"Johns Creek",
			"East Point",
			"Dunwoody",
			"Duluth",
			"Decatur",
			"Dalton",
			"Cartersville",
			"Atlanta",
			"Alpharetta",
			"Tuscaloosa",
			"Tusca",
			"Talladega",
			"Scottsboro",
			"Rainsville",
			"Montgomery",
			"Jasper",
			"Huntsville",
			"Gadsden",
			"Florence",
			"Decatur",
			"Cullman",
			"Centre",
			"Birmingham",
			"Athens",
			"Anniston",
			"web",
			"Montgomery",
			"Montgomery, AL",
			"Rainsville",
			"Red Bank",
			"Nashville",
			"Memphis",
			"East Ridge",
			"East Brainerd",
			"Collegedale",
			"Cleveland",
			"Chattanooga",
			"Tyrone",
			"GA",
			"Smyrna",
			"Sandy Springs",
			"Roswell",
			"Rome",
			"Peachtree City",
			"Marietta",
			"Kennesaw",
			"Johns Creek",
			"East Point",
			"Easy Point",
			"Dunwoody",
			"Decatur",
			"Dalton",
			"Cartersville",
			"Atlanta",
			"Alpharetta",
			"AL",
			"Tuscaloosa",
			"Talladega",
			"Scottsboro",
			"Rainsville",
			"Jasper",
			"Huntsville",
			"Gadsden",
			"Florence",
			"Decatur",
			"Cullman"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Lord Nikon",
			"get_table",
			"",
			"elements",
			"core",
			"col-xs-2 col-sm-1",
			"mint",
			"$mint",
			"excitebyte",
			"Soddy-Daisy",
			"Red Bank",
			"Nashville",
			"Memphis",
			"East Ridge",
			"East Brainerd",
			"Collegedale",
			"Cleveland",
			"Chattanooga",
			"Tyrone",
			"Smyrna",
			"Sandy Springs",
			"Roswell",
			"Rome",
			"Peachtree City",
			"Marietta",
			"Kennesaw",
			"Johns Creek",
			"East Point",
			"Dunwoody",
			"Duluth",
			"Decatur",
			"Dalton",
			"Cartersville",
			"Atlanta",
			"Alpharetta",
			"Tuscaloosa",
			"Talladega",
			"Scottsboro",
			"Rainsville",
			"Montgomery",
			"Jasper",
			"Huntsville",
			"Gadsden",
			"Florence",
			"Decatur",
			"Cullman",
			"Centre",
			"Birmingham",
			"Athens",
			"Duluth",
			"Duluth, GA",
			"Montgomery",
			"Soddy-Daisy",
			"Nashville",
			"Memphis",
			"East Ridge",
			"East Brainerd",
			"Collegedale",
			"Cleveland",
			"Chattanooga",
			"TN",
			"Tyrone",
			"Smyrna",
			"Sandy Springs",
			"Roswell",
			"Rome",
			"Peachtree City",
			"Marietta",
			"Kennesaw",
			"Johns Creek",
			"East Point",
			"Easy Point",
			"Dunwoody",
			"Decatur",
			"Dalton",
			"Cartersville",
			"Atlanta",
			"Alpharetta",
			"Tuscaloosa",
			"Talladega",
			"Scottsboro",
			"Rainsville",
			"Jasper",
			"Huntsville",
			"Gadsden",
			"Florence",
			"Decatur",
			"Cullman",
			"Centre",
			"Birmingham",
			"Auburn",
			"Athens",
			"Anniston",
			"Tuscaloosa",
			"Scottsboro",
			"Gadsden",
			"Huntsville",
			"Birmingham",
			"Chattanooga",
			"Centre",
			"Athens",
			"Cartersville",
			"Dalton",
			"Nashville",
			"Memphis",
			"Soddy-Daisy",
			"Collegedale",
			"Red Bank",
			"East Brainerd",
			"East Ridge",
			"Collegedale",
			"Red Bank",
			"East Brainerd",
			"East Point",
			"Atlanta",
			"Dunwoody",
			"Tyrone",
			"Duluth",
			"Smyrna",
			"Peachtree City",
			"Sandy Springs",
			"Johns Creek",
			"Kennesaw",
			"Marietta",
			"Decatur",
			"Roswell",
			"Alpharetta",
			"orange"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "rising.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2570,
						"regions":
						{
						},
						"selection":
						[
							[
								1354,
								1354
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "crypto.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2767,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "urkel.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17193,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 187.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "urkelbot.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"asd",
				"C:\\repos\\accel\\sass\\default.scss"
			],
			[
				"",
				"C:\\repos\\accel\\services-logos.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 140.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
